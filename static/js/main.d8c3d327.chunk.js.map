{"version":3,"sources":["reportWebVitals.ts","hooks/useWindowSize/index.ts","style/index.ts","index.tsx","components/Layout/index.tsx","containers/pages/index.tsx","containers/index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","useWindowSize","useState","windowHeight","windowWidth","windowSize","setWindowSize","debounced","useDebouncedCallback","window","innerHeight","innerWidth","useEventListener","callback","useEffect","Wrapper","styled","div","isFullScreen","height","isExpansion","Viewer","PagesWrapper","currentPage","pageWidth","NavigationButton","a","navigation","Page","width","Img","img","isOdd","isSingleView","Controller","aside","SubController","MainController","RangeInput","input","ScaleController","ControlButton","button","CloseButton","ComicViewer","pages","switchingRatio","setIsExpansion","handle","useFullScreenHandle","useMemo","active","enter","exit","handleClickOnExpansion","useCallback","prevIsExpansion","handleClickOnFullScreen","handleClickOnClose","expansion","fullScreen","items","map","page","index","threshold","alt","src","uniqid","setPrevIsExpansion","setCurrentPage","disabledNextPage","length","handleClickOnNextPage","prevCurrentPage","disabledPrevPage","handleClickOnPrevPage","showMove","setShowMove","handleClickOnShowMove","handleChange","value","currentTarget","parseInt","handleClickOnOutside","useOutsideClickRef","ref","handlers","useSwipeable","onSwipedLeft","onSwipedRight","undefined","Math","floor","onClick","color","size","onChange","max","ceil","min","step","type","Layout","children","style","minHeight","Pages","render","document","getElementById"],"mappings":"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","file":"static/js/main.d8c3d327.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect, useState } from \"react\";\nimport { useDebouncedCallback } from \"use-debounce\";\nimport useEventListener from \"@use-it/event-listener\";\n\nexport type WindowSize = {\n  windowHeight: number;\n  windowWidth: number;\n};\n\nconst useWindowSize = (): WindowSize => {\n  const [windowSize, setWindowSize] = useState<WindowSize>({\n    windowHeight: 0,\n    windowWidth: 0,\n  });\n  const debounced = useDebouncedCallback(() => {\n    setWindowSize({\n      windowHeight: window.innerHeight,\n      windowWidth: window.innerWidth,\n    });\n  }, 100);\n  useEventListener(\"resize\", debounced.callback);\n\n  useEffect(() => {\n    debounced.callback();\n  }, [debounced]);\n\n  return windowSize;\n};\n\nexport default useWindowSize;\n","import styled from \"@emotion/styled\";\n\nexport type WrapperProps = {\n  height: number;\n  isExpansion: boolean;\n  isFullScreen: boolean;\n};\n\nexport const Wrapper = styled.div<WrapperProps>`\n  background: #333;\n  color: #fff;\n  display: grid;\n  grid-template: ${({ isFullScreen }) =>\n    `1fr ${isFullScreen ? \"0\" : \"40px\"} / 1fr`};\n  height: ${({ height, isExpansion }) =>\n    `${height - (isExpansion ? 0 : 95)}px`};\n  max-height: ${({ height, isExpansion }) => `${isExpansion ? height : 840}px`};\n  min-height: ${({ isExpansion }) => `${isExpansion ? 0 : 440}px`};\n  overflow: hidden;\n  position: relative;\n  transition: 250ms;\n`;\n\nexport const Viewer = styled.div`\n  height: 100%;\n  position: relative;\n`;\n\nexport type PagesWrapperProps = {\n  currentPage: number;\n  pageWidth: number;\n};\n\nexport const PagesWrapper = styled.div<PagesWrapperProps>`\n  direction: rtl;\n  display: grid;\n  grid-auto-flow: column;\n  height: 100%;\n  overflow: hidden;\n  position: absolute;\n  right: 0;\n  transform: translateX(\n    calc(${({ currentPage, pageWidth }) => `${currentPage * pageWidth}px`})\n  );\n  transition: 250ms;\n`;\n\nexport type NavigationButtonProps = {\n  navigation: \"next\" | \"prev\";\n};\n\nexport const NavigationButton = styled.a<NavigationButtonProps>`\n  align-items: center;\n  background: transparent;\n  border: 0;\n  cursor: pointer;\n  display: flex;\n  height: 100%;\n  justify-content: ${({ navigation }) =>\n    navigation === \"next\" ? \"flex-start\" : \"flex-end\"};\n  opacity: 0.5;\n  right: ${({ navigation }) => (navigation === \"next\" ? \"auto\" : \"0\")};\n  padding: 0;\n  position: absolute;\n  transition: 250ms;\n  width: calc(100% / 3);\n  :hover {\n    opacity: 1;\n  }\n  @media (max-width: 980px) {\n    opacity: 0;\n    :hover {\n      opacity: 0;\n    }\n  }\n`;\n\nexport type PageProps = {\n  width: number;\n};\n\nexport const Page = styled.div<PageProps>`\n  overflow: hidden;\n  width: ${({ width }) => `${width}px`};\n`;\n\nexport type ImgProps = {\n  isOdd: boolean;\n  isSingleView: boolean;\n};\n\nexport const Img = styled.img<ImgProps>`\n  height: 100%;\n  object-fit: contain;\n  object-position: ${({ isOdd, isSingleView }) =>\n    isSingleView ? \"center\" : isOdd ? \"left\" : \"right\"};\n  width: 100%;\n`;\n\nexport const Controller = styled.aside`\n  bottom: 0;\n  box-sizing: border-box;\n  height: 40px;\n  left: 0;\n  padding: 0 16px;\n  position: absolute;\n  width: 100%;\n`;\n\nexport const SubController = styled.div`\n  align-items: center;\n  display: flex;\n  height: 100%;\n  justify-content: center;\n`;\n\nexport const MainController = styled.div`\n  align-items: center;\n  display: flex;\n  height: 100%;\n  justify-content: space-between;\n`;\n\nexport const RangeInput = styled.input`\n  cursor: pointer;\n  max-width: 1024px;\n  transform: rotate(180deg);\n  width: 100%;\n`;\n\nexport const ScaleController = styled.div`\n  display: grid;\n  gap: 8px;\n  grid-auto-flow: column;\n  height: 100%;\n`;\n\nexport const ControlButton = styled.button`\n  align-items: center;\n  background: transparent;\n  border: 0;\n  color: #ccc;\n  cursor: pointer;\n  display: grid;\n  font-size: 14px;\n  gap: 8px;\n  grid-template: auto / auto auto;\n  height: 100%;\n`;\n\nexport const CloseButton = styled.button`\n  background: transparent;\n  border: 0;\n  cursor: pointer;\n  padding: 12px 12px;\n  position: absolute;\n  right: 0;\n  top: 0;\n`;\n","import useWindowSize from \"./hooks/useWindowSize\";\nimport React, {\n  ComponentPropsWithoutRef,\n  FC,\n  ReactNode,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport {\n  CloseButton,\n  ControlButton,\n  Controller,\n  Img,\n  ImgProps,\n  MainController,\n  NavigationButton,\n  Page,\n  PageProps,\n  PagesWrapper,\n  RangeInput,\n  ScaleController,\n  SubController,\n  Viewer,\n  Wrapper,\n  WrapperProps,\n} from \"./style\";\nimport { FullScreen, useFullScreenHandle } from \"react-full-screen\";\nimport uniqid from \"uniqid\";\nimport {\n  BiChevronLeft,\n  BiChevronRight,\n  BiExpand,\n  BiFullscreen,\n  BiMoveHorizontal,\n} from \"react-icons/bi\";\nimport useOutsideClickRef from \"@rooks/use-outside-click-ref\";\nimport { LazyLoadComponent } from \"react-lazy-load-image-component\";\nimport { CgClose } from \"react-icons/cg\";\nimport { useSwipeable } from \"react-swipeable\";\n\nexport type ComicViewerProps = {\n  pages: Array<string | ReactNode>;\n  switchingRatio?: number;\n};\n\nconst ComicViewer: FC<ComicViewerProps> = ({ pages, switchingRatio = 1 }) => {\n  const { windowHeight, windowWidth } = useWindowSize();\n  const [isExpansion, setIsExpansion] = useState<WrapperProps[\"isExpansion\"]>(\n    false\n  );\n  const handle = useFullScreenHandle();\n  const { active, enter, exit } = useMemo(\n    () => ({\n      ...handle,\n    }),\n    [handle]\n  );\n  const handleClickOnExpansion = useCallback<\n    NonNullable<ComponentPropsWithoutRef<\"button\">[\"onClick\"]>\n  >(() => {\n    setIsExpansion((prevIsExpansion) => !prevIsExpansion);\n  }, []);\n  const handleClickOnFullScreen = useCallback<\n    NonNullable<ComponentPropsWithoutRef<\"button\">[\"onClick\"]>\n  >(() => {\n    enter();\n  }, [enter]);\n  const handleClickOnClose = useCallback<\n    NonNullable<ComponentPropsWithoutRef<\"button\">[\"onClick\"]>\n  >(() => {\n    exit();\n  }, [exit]);\n  const pageWidth = useMemo<PageProps[\"width\"]>(\n    () =>\n      windowHeight > windowWidth * switchingRatio\n        ? windowWidth\n        : windowWidth / 2,\n    [switchingRatio, windowHeight, windowWidth]\n  );\n  const expansion = useMemo<ComponentPropsWithoutRef<\"button\">[\"children\"]>(\n    () => (isExpansion ? \"通常\" : \"拡大\"),\n    [isExpansion]\n  );\n  const fullScreen = useMemo<ComponentPropsWithoutRef<\"button\">[\"children\"]>(\n    () => (active ? \"戻る\" : \"全画面\"),\n    [active]\n  );\n  const isSingleView = useMemo<ImgProps[\"isSingleView\"]>(\n    () => windowHeight > windowWidth * switchingRatio,\n    [switchingRatio, windowHeight, windowWidth]\n  );\n  const items = useMemo(\n    () =>\n      pages.map((page, index) => (\n        <Page key={uniqid()} width={pageWidth}>\n          {typeof page === \"string\" ? (\n            <LazyLoadComponent threshold={0}>\n              <Img\n                alt={page}\n                isOdd={!(index % 2)}\n                isSingleView={isSingleView}\n                src={page}\n              />\n            </LazyLoadComponent>\n          ) : (\n            page\n          )}\n        </Page>\n      )),\n    [isSingleView, pageWidth, pages]\n  );\n  const [prevIsExpansion, setPrevIsExpansion] = useState<\n    typeof isExpansion | undefined\n  >();\n  const [currentPage, setCurrentPage] = useState(0);\n  const disabledNextPage = useMemo(\n    () =>\n      (isSingleView && currentPage >= pages.length - 1) ||\n      (!isSingleView && currentPage >= pages.length - 2),\n    [currentPage, isSingleView, pages.length]\n  );\n  const handleClickOnNextPage = useCallback<\n    NonNullable<ComponentPropsWithoutRef<\"a\">[\"onClick\"]>\n  >(() => {\n    if (disabledNextPage) {\n      return;\n    }\n\n    setCurrentPage(\n      (prevCurrentPage) => prevCurrentPage + (isSingleView ? 1 : 2)\n    );\n  }, [disabledNextPage, isSingleView]);\n  const disabledPrevPage = useMemo(() => currentPage === 0, [currentPage]);\n  const handleClickOnPrevPage = useCallback<\n    NonNullable<ComponentPropsWithoutRef<\"a\">[\"onClick\"]>\n  >(() => {\n    if (disabledPrevPage) {\n      return;\n    }\n\n    setCurrentPage(\n      (prevCurrentPage) => prevCurrentPage - (isSingleView ? 1 : 2)\n    );\n  }, [disabledPrevPage, isSingleView]);\n  const [showMove, setShowMove] = useState(false);\n  const handleClickOnShowMove = useCallback<\n    NonNullable<ComponentPropsWithoutRef<\"button\">[\"onClick\"]>\n  >(() => {\n    setShowMove(true);\n  }, []);\n  const handleChange = useCallback<\n    NonNullable<ComponentPropsWithoutRef<\"input\">[\"onChange\"]>\n  >(\n    ({ currentTarget: { value } }) => {\n      setCurrentPage(\n        isSingleView ? parseInt(value, 10) - 1 : (parseInt(value, 10) - 1) * 2\n      );\n    },\n    [isSingleView]\n  );\n  const handleClickOnOutside = useCallback(() => {\n    setShowMove(false);\n  }, []);\n  const [ref] = useOutsideClickRef(handleClickOnOutside);\n  const handlers = useSwipeable({\n    onSwipedLeft: () => {\n      if (disabledPrevPage) {\n        return;\n      }\n\n      setCurrentPage(\n        (prevCurrentPage) => prevCurrentPage - (isSingleView ? 1 : 2)\n      );\n    },\n    onSwipedRight: () => {\n      if (disabledNextPage) {\n        return;\n      }\n\n      setCurrentPage(\n        (prevCurrentPage) => prevCurrentPage + (isSingleView ? 1 : 2)\n      );\n    },\n  });\n\n  useEffect(() => {\n    if (!active) {\n      if (typeof prevIsExpansion !== \"boolean\") {\n        return;\n      }\n\n      setPrevIsExpansion(undefined);\n      setIsExpansion(prevIsExpansion);\n\n      return;\n    }\n\n    if (typeof prevIsExpansion === \"boolean\") {\n      return;\n    }\n\n    setPrevIsExpansion(isExpansion);\n    setIsExpansion(true);\n  }, [active, isExpansion, prevIsExpansion]);\n\n  useEffect(() => {\n    if (isSingleView) {\n      return;\n    }\n\n    setCurrentPage((prevCurrentPage) => Math.floor(prevCurrentPage / 2) * 2);\n  }, [isSingleView]);\n\n  return (\n    <FullScreen handle={handle}>\n      <Wrapper\n        height={windowHeight}\n        isExpansion={isExpansion}\n        isFullScreen={active}\n        {...handlers}\n      >\n        <Viewer>\n          <PagesWrapper currentPage={currentPage} pageWidth={pageWidth}>\n            {items}\n          </PagesWrapper>\n          {disabledNextPage ? null : (\n            <NavigationButton navigation=\"next\" onClick={handleClickOnNextPage}>\n              <BiChevronLeft color=\"#888\" size={64} />\n            </NavigationButton>\n          )}\n          {disabledPrevPage ? null : (\n            <NavigationButton navigation=\"prev\" onClick={handleClickOnPrevPage}>\n              <BiChevronRight color=\"#888\" size={64} />\n            </NavigationButton>\n          )}\n        </Viewer>\n        {active ? (\n          <CloseButton onClick={handleClickOnClose}>\n            <CgClose color=\"#fff\" size={36} />\n          </CloseButton>\n        ) : (\n          <Controller>\n            {showMove ? (\n              <SubController ref={ref}>\n                <RangeInput\n                  onChange={handleChange}\n                  max={\n                    isSingleView ? pages.length : Math.ceil(pages.length / 2)\n                  }\n                  min={1}\n                  step={1}\n                  type=\"range\"\n                  value={\n                    isSingleView\n                      ? currentPage + 1\n                      : Math.floor(currentPage / 2) + 1\n                  }\n                />\n              </SubController>\n            ) : (\n              <MainController>\n                <ScaleController>\n                  <ControlButton onClick={handleClickOnExpansion}>\n                    <BiExpand color=\"#fff\" size={24} />\n                    {expansion}\n                  </ControlButton>\n                  <ControlButton onClick={handleClickOnFullScreen}>\n                    <BiFullscreen color=\"#fff\" size={24} />\n                    {fullScreen}\n                  </ControlButton>\n                </ScaleController>\n                <ControlButton onClick={handleClickOnShowMove}>\n                  <BiMoveHorizontal color=\"#fff\" size={24} />\n                  移動\n                </ControlButton>\n              </MainController>\n            )}\n          </Controller>\n        )}\n      </Wrapper>\n    </FullScreen>\n  );\n};\n\nexport default ComicViewer;\n","import { ComponentPropsWithoutRef, FC, useMemo } from \"react\";\nimport useWindowSize from \"hooks/useWindowSize\";\n\nconst Layout: FC = ({ children }) => {\n  const { windowHeight } = useWindowSize();\n  const style = useMemo<ComponentPropsWithoutRef<\"div\">[\"style\"]>(\n    () => ({\n      minHeight: windowHeight,\n    }),\n    [windowHeight]\n  );\n\n  return <div style={style}>{children}</div>;\n};\n\nexport default Layout;\n","import ComicViewer from \"index\";\nimport Layout from \"components/Layout\";\nimport React, { FC } from \"react\";\n\nconst Pages: FC = () => (\n  <Layout>\n    <ComicViewer\n      pages={[\n        \"/comics/0.jpg\",\n        \"/comics/1.jpg\",\n        \"/comics/2.jpg\",\n        \"/comics/3.jpg\",\n        \"/comics/4.jpg\",\n        \"/comics/5.jpg\",\n        \"/comics/6.jpg\",\n      ]}\n      switchingRatio={0.75}\n    />\n    <p>\n      hoge\n      <br />\n      hoge\n      <br />\n      hoge\n      <br />\n      hoge\n      <br />\n      hoge\n      <br />\n      hoge\n      <br />\n      hoge\n      <br />\n      hoge\n      <br />\n      hoge\n    </p>\n  </Layout>\n);\n\nexport default Pages;\n","import React, { StrictMode } from \"react\";\nimport { render } from \"react-dom\";\nimport reportWebVitals from \"reportWebVitals\";\nimport Pages from \"./pages\";\nimport \"./styles/global.scss\";\n\nrender(\n  <StrictMode>\n    <Pages />\n  </StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}